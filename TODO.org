* Feature requests
** scoring of search results
    - maybe allow user to define regex for higher scores (e.g. "^\* "
      for org mode titles)?
    - higher score for several hits on the same line       
    - maybe separate filename results from grep derived results
** DONE matching of whole words
** matching of sequences of words (includes spaces)
** TODO AG Silver searcher backend   
    - grep -Elie 'pat' file1 => ag -li 'pat' file1
    - grep -EHine 'pat' file1 => ag -i --noheading
      - Problem. If ag receives just a single file, it does not print the filename
	in front of the search hit (unlike grep -H). So, searching a single file
	must be treated specially.
    - additional possibility: find all files matching a pattern: ag -g 'pat' dir
       - use --vimgrep option of ag for parsing
	 #+BEGIN_SRC sh
	 ag --stats --vimgrep derek *.org
	 #+END_SRC

	 The lookup of file candidates can be given inside the ag command with
	 the -G option. The -Q option searches for the literal expression instead
	 of a regular epression.

               #+BEGIN_SRC sh
	 ag --stats --vimgrep -G '.*\.org' -Q Derek 
** TODO rg ripgrep as a backend
   - search examples
     - list all files of type org in Documents/ matching "TODO:"
       : rg -l -t org TAG: Documents
     - same, but instead of a predefined type use a globbing expression
       : rg -l -g '*.org' TAG: Documents

   #+BEGIN_SRC bash :results output
   time (find ~/Documents -name '*.org' | xargs grep 'TODO:')  2>&1 1>/dev/null
   #+END_SRC

   #+RESULTS:
   : 
   : real	0m0.084s
   : user	0m0.013s
   : sys	0m0.073s

   #+BEGIN_SRC bash :results output
   time (find ~/Documents -name '*.org' | xargs rg 'TODO:')  2>&1 1>/dev/null
   #+END_SRC

   #+RESULTS:
   : 
   : real	0m0.086s
   : user	0m0.021s
   : sys	0m0.070s
   
** DONE Increase speed by substituting pure lisp file finding
   CLOSED: [2018-07-15 Sun 10:19]
   Using f--files is quite slow. Offer alternative ways, e.g. by using
   an external shell command like "find".

* Issues
  - the helm search is different from the searches running in the shell subprocess
    (currently grep based). Different regexp search syntax.
  - The "Matching Files" and "File Contents" Sources both build their lists from
    the results of the asynchronous subprocess. But helm can only deal with a single
    such process. New results in the "Matching Files" are not correctly updated.
  - [2017-12-31 Sun] when I use "snf suk" I only get 3 matching files,
    but if I use "suk snf" there are lots.
    
** [2023-01-22 Sun] error
*** Error
    helm-output-filter-1: No catch for tag: --cl-block-nil--, nil [2 times]
*** backtrace

    #+begin_example
helm-output-filter--process-source(#<process helm-deft-proc> "/dfeich/polybox/Documents/psi-cluster-..." ((name . "File contents") (cleanup lambda nil (if (get-buffer "*helm-deft-proc*") (progn (let ... ...)))) (keymap keymap (f12 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957189e80>)) (f11 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957198e80>)) (f10 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572dfe80>)) (f9 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572cee80>)) (f8 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572ade80>)) (f7 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572bce80>)) (f6 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572e3e80>)) (f5 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572f2e80>)) (f4 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957231e80>)) (f3 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957220e80>)) (f2 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957207e80>)) (menu-bar keymap (help-menu keymap (describe keymap ...))) (help keymap (109 . helm-help)) (23 . helm-helm-yank-text-at-point-with-subkeys) (f1 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957216e80>)) (8 keymap (109 . helm-help) (104 . undefined) (8 . undefined) (99 . helm-customize-group) (4 . helm-enable-or-switch-to-debug)) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (57 . #f(compiled-function () ... #<bytecode -0x467a7f8ddcf0975>)) (56 . #f(compiled-function () ... #<bytecode -0x467a7f8ddce1975>)) (55 . #f(compiled-function () ... #<bytecode -0x467a7f8ddc82975>)) (54 . #f(compiled-function () ... #<bytecode -0x467a7f8ddc93975>)) (53 . #f(compiled-function () ... #<bytecode -0x467a7f8ddffc975>)) (52 . #f(compiled-function () ... #<bytecode -0x467a7f8ddfed975>)) (51 . #f(compiled-function () ... #<bytecode -0x467a7f8ddf8e975>)) (50 . #f(compiled-function () ... #<bytecode -0x467a7f8ddf9f975>)) (49 . #f(compiled-function () ... #<bytecode -0x467a7f8ddf18975>)) (110 . helm-helm-run-cycle-resume-with-subkeys) (108 . helm-display-line-numbers-mode) (62 . helm-toggle-truncate-line) (21 . helm-refresh) (6 . helm-follow-mode) (9 . helm-insert-or-copy) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (37 . helm-exchange-minibuffer-and-header-line) (95 . helm-toggle-full-frame) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (24 keymap (57 . #f(compiled-function () ... #<bytecode -0x467a1dddf630975>)) (56 . #f(compiled-function () ... #<bytecode -0x467a1dddf621975>)) (55 . #f(compiled-function () ... #<bytecode -0x467a1dddf642975>)) (54 . #f(compiled-function () ... #<bytecode -0x467a1dddf653975>)) (53 . #f(compiled-function () ... #<bytecode -0x467a1dddf53c975>)) (52 . #f(compiled-function () ... #<bytecode -0x467a1dddf52d975>)) (51 . #f(compiled-function () ... #<bytecode -0x467a1dddf54e975>)) (50 . #f(compiled-function () ... #<bytecode -0x467a1dddf55f975>)) (49 . #f(compiled-function () ... #<bytecode -0x467a1dddf5d8975>)) (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark-forward) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (left . helm-previous-source) (right . helm-next-source) (15 . helm-next-source) (10 . helm-execute-persistent-action) ...) (action . helm-grep-action) (requires-pattern . 2) (filtered-candidate-transformer helm-fuzzy-highlight-matches) (filter-one-by-one lambda (candidate) (helm-deft-matching-files-search candidate) (helm-grep-filter-one-by-one candidate)) (pattern-transformer lambda (pattern) (let* ((--cl-var-- ...) (ptr nil) (cptr nil)) (while (consp --cl-var--) (setq ptr ...) (if ... ... ...) (setq --cl-var-- ...)) (mapconcat 'identity cptr " "))) (redisplay . identity) (header-line . #("C-j: helm-grep-action (keeping session..." 0 3 (font-lock-face help-key-binding face help-key-binding))) (group . helm) (candidates-process . helm-deft-fgrep-search) (item-count . 100) (incomplete-line . "/home/dfeich/polybox/Documents/psi-clu...") (insertion-marker . #<marker at 16930 in *helm*>)) 100)
helm-output-filter-1((#<process helm-deft-proc> (name . "File contents") (cleanup lambda nil (if (get-buffer "*helm-deft-proc*") (progn (let ... ...)))) (keymap keymap (f12 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957189e80>)) (f11 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957198e80>)) (f10 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572dfe80>)) (f9 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572cee80>)) (f8 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572ade80>)) (f7 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572bce80>)) (f6 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572e3e80>)) (f5 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572f2e80>)) (f4 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957231e80>)) (f3 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957220e80>)) (f2 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957207e80>)) (menu-bar keymap (help-menu keymap (describe keymap ...))) (help keymap (109 . helm-help)) (23 . helm-helm-yank-text-at-point-with-subkeys) (f1 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957216e80>)) (8 keymap (109 . helm-help) (104 . undefined) (8 . undefined) (99 . helm-customize-group) (4 . helm-enable-or-switch-to-debug)) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (57 . #f(compiled-function () ... #<bytecode -0x467a7f8ddcf0975>)) (56 . #f(compiled-function () ... #<bytecode -0x467a7f8ddce1975>)) (55 . #f(compiled-function () ... #<bytecode -0x467a7f8ddc82975>)) (54 . #f(compiled-function () ... #<bytecode -0x467a7f8ddc93975>)) (53 . #f(compiled-function () ... #<bytecode -0x467a7f8ddffc975>)) (52 . #f(compiled-function () ... #<bytecode -0x467a7f8ddfed975>)) (51 . #f(compiled-function () ... #<bytecode -0x467a7f8ddf8e975>)) (50 . #f(compiled-function () ... #<bytecode -0x467a7f8ddf9f975>)) (49 . #f(compiled-function () ... #<bytecode -0x467a7f8ddf18975>)) (110 . helm-helm-run-cycle-resume-with-subkeys) (108 . helm-display-line-numbers-mode) (62 . helm-toggle-truncate-line) (21 . helm-refresh) (6 . helm-follow-mode) (9 . helm-insert-or-copy) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (37 . helm-exchange-minibuffer-and-header-line) (95 . helm-toggle-full-frame) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (24 keymap (57 . #f(compiled-function () ... #<bytecode -0x467a1dddf630975>)) (56 . #f(compiled-function () ... #<bytecode -0x467a1dddf621975>)) (55 . #f(compiled-function () ... #<bytecode -0x467a1dddf642975>)) (54 . #f(compiled-function () ... #<bytecode -0x467a1dddf653975>)) (53 . #f(compiled-function () ... #<bytecode -0x467a1dddf53c975>)) (52 . #f(compiled-function () ... #<bytecode -0x467a1dddf52d975>)) (51 . #f(compiled-function () ... #<bytecode -0x467a1dddf54e975>)) (50 . #f(compiled-function () ... #<bytecode -0x467a1dddf55f975>)) (49 . #f(compiled-function () ... #<bytecode -0x467a1dddf5d8975>)) (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark-forward) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (left . helm-previous-source) (right . helm-next-source) (15 . helm-next-source) (10 . helm-execute-persistent-action) ...) (action . helm-grep-action) (requires-pattern . 2) (filtered-candidate-transformer helm-fuzzy-highlight-matches) (filter-one-by-one lambda (candidate) (helm-deft-matching-files-search candidate) (helm-grep-filter-one-by-one candidate)) (pattern-transformer lambda (pattern) (let* ((--cl-var-- ...) (ptr nil) (cptr nil)) (while (consp --cl-var--) (setq ptr ...) (if ... ... ...) (setq --cl-var-- ...)) (mapconcat 'identity cptr " "))) (redisplay . identity) (header-line . #("C-j: helm-grep-action (keeping session..." 0 3 (font-lock-face help-key-binding face help-key-binding))) (group . helm) (candidates-process . helm-deft-fgrep-search) (item-count . 100) (incomplete-line . "/home/dfeich/polybox/Documents/psi-clu...") (insertion-marker . #<marker at 16930 in *helm*>)) "/dfeich/polybox/Documents/psi-cluster-...")
helm-output-filter(#<process helm-deft-proc> "/dfeich/polybox/Documents/psi-cluster-specs/src-fi...")
helm-read-from-minibuffer(nil nil nil nil (keymap (67108908 . helm-deft-change-dir-list) (67108910 . helm-deft-reset-to-init) (19 . helm-deft-set-to-marked) (4 . helm-deft-remove-candidate-file) (18 . helm-deft-rotate-searchkeys) keymap (f12 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957189e80>)) (f11 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957198e80>)) (f10 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572dfe80>)) (f9 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572cee80>)) (f8 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572ade80>)) (f7 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572bce80>)) (f6 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572e3e80>)) (f5 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572f2e80>)) (f4 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957231e80>)) (f3 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957220e80>)) (f2 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957207e80>)) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (23 . helm-helm-yank-text-at-point-with-subkeys) (f1 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957216e80>)) (8 keymap (109 . helm-help) (104 . undefined) (8 . undefined) (99 . helm-customize-group) (4 . helm-enable-or-switch-to-debug)) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (57 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddcf0975>)) (56 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddce1975>)) (55 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddc82975>)) (54 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddc93975>)) (53 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddffc975>)) (52 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddfed975>)) (51 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf8e975>)) (50 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf9f975>)) (49 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf18975>)) (110 . helm-helm-run-cycle-resume-with-subkeys) (108 . helm-display-line-numbers-mode) (62 . helm-toggle-truncate-line) (21 . helm-refresh) (6 . helm-follow-mode) (9 . helm-insert-or-copy) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (37 . helm-exchange-minibuffer-and-header-line) (95 . helm-toggle-full-frame) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (24 keymap (57 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf630975>)) (56 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf621975>)) (55 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf642975>)) (54 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf653975>)) (53 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf53c975>)) (52 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf52d975>)) (51 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf54e975>)) (50 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf55f975>)) (49 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf5d8975>)) (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark-forward) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (left . helm-previous-source) (right . helm-next-source) (15 . helm-next-source) (10 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-maybe-exit-minibuffer) (7 . helm-keyboard-quit) (22 . helm-scroll-down) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-candidates-in-source) (85 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark-backward) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (111 . helm-previous-source) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-scroll-up)) (next . helm-next-page) (prior . helm-previous-page) ...) nil nil)
helm-internal((helm-source-deft-fn helm-source-deft-matching-files helm-source-deft-filegrep) nil nil nil nil nil (keymap (67108908 . helm-deft-change-dir-list) (67108910 . helm-deft-reset-to-init) (19 . helm-deft-set-to-marked) (4 . helm-deft-remove-candidate-file) (18 . helm-deft-rotate-searchkeys) keymap (f12 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957189e80>)) (f11 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957198e80>)) (f10 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572dfe80>)) (f9 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572cee80>)) (f8 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572ade80>)) (f7 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572bce80>)) (f6 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572e3e80>)) (f5 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572f2e80>)) (f4 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957231e80>)) (f3 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957220e80>)) (f2 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957207e80>)) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (23 . helm-helm-yank-text-at-point-with-subkeys) (f1 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957216e80>)) (8 keymap (109 . helm-help) (104 . undefined) (8 . undefined) (99 . helm-customize-group) (4 . helm-enable-or-switch-to-debug)) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (57 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddcf0975>)) (56 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddce1975>)) (55 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddc82975>)) (54 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddc93975>)) (53 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddffc975>)) (52 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddfed975>)) (51 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf8e975>)) (50 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf9f975>)) (49 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf18975>)) (110 . helm-helm-run-cycle-resume-with-subkeys) (108 . helm-display-line-numbers-mode) (62 . helm-toggle-truncate-line) (21 . helm-refresh) (6 . helm-follow-mode) (9 . helm-insert-or-copy) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (37 . helm-exchange-minibuffer-and-header-line) (95 . helm-toggle-full-frame) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (24 keymap (57 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf630975>)) (56 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf621975>)) (55 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf642975>)) (54 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf653975>)) (53 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf53c975>)) (52 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf52d975>)) (51 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf54e975>)) (50 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf55f975>)) (49 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf5d8975>)) (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark-forward) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (left . helm-previous-source) (right . helm-next-source) (15 . helm-next-source) (10 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-maybe-exit-minibuffer) (7 . helm-keyboard-quit) (22 . helm-scroll-down) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-candidates-in-source) (85 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark-backward) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (111 . helm-previous-source) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-scroll-up)) (next . helm-next-page) (prior . helm-previous-page) ...) nil nil)
helm((helm-source-deft-fn helm-source-deft-matching-files helm-source-deft-filegrep) nil nil nil nil nil (keymap (67108908 . helm-deft-change-dir-list) (67108910 . helm-deft-reset-to-init) (19 . helm-deft-set-to-marked) (4 . helm-deft-remove-candidate-file) (18 . helm-deft-rotate-searchkeys) keymap (f12 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957189e80>)) (f11 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957198e80>)) (f10 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572dfe80>)) (f9 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572cee80>)) (f8 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572ade80>)) (f7 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572bce80>)) (f6 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572e3e80>)) (f5 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572f2e80>)) (f4 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957231e80>)) (f3 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957220e80>)) (f2 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957207e80>)) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (23 . helm-helm-yank-text-at-point-with-subkeys) (f1 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957216e80>)) (8 keymap (109 . helm-help) (104 . undefined) (8 . undefined) (99 . helm-customize-group) (4 . helm-enable-or-switch-to-debug)) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (57 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddcf0975>)) (56 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddce1975>)) (55 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddc82975>)) (54 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddc93975>)) (53 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddffc975>)) (52 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddfed975>)) (51 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf8e975>)) (50 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf9f975>)) (49 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf18975>)) (110 . helm-helm-run-cycle-resume-with-subkeys) (108 . helm-display-line-numbers-mode) (62 . helm-toggle-truncate-line) (21 . helm-refresh) (6 . helm-follow-mode) (9 . helm-insert-or-copy) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (37 . helm-exchange-minibuffer-and-header-line) (95 . helm-toggle-full-frame) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (24 keymap (57 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf630975>)) (56 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf621975>)) (55 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf642975>)) (54 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf653975>)) (53 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf53c975>)) (52 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf52d975>)) (51 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf54e975>)) (50 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf55f975>)) (49 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf5d8975>)) (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark-forward) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (left . helm-previous-source) (right . helm-next-source) (15 . helm-next-source) (10 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-maybe-exit-minibuffer) (7 . helm-keyboard-quit) (22 . helm-scroll-down) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-candidates-in-source) (85 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark-backward) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (111 . helm-previous-source) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-scroll-up)) (next . helm-next-page) (prior . helm-previous-page) ...) nil nil)
helm(:sources (helm-source-deft-fn helm-source-deft-matching-files helm-source-deft-filegrep) :keymap (keymap (67108908 . helm-deft-change-dir-list) (67108910 . helm-deft-reset-to-init) (19 . helm-deft-set-to-marked) (4 . helm-deft-remove-candidate-file) (18 . helm-deft-rotate-searchkeys) keymap (f12 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957189e80>)) (f11 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957198e80>)) (f10 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572dfe80>)) (f9 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572cee80>)) (f8 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572ade80>)) (f7 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572bce80>)) (f6 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572e3e80>)) (f5 . #f(compiled-function () (interactive nil) #<bytecode 0x1f4029572f2e80>)) (f4 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957231e80>)) (f3 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957220e80>)) (f2 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957207e80>)) (menu-bar keymap (help-menu keymap (describe keymap (describe-mode . helm-help)))) (help keymap (109 . helm-help)) (23 . helm-helm-yank-text-at-point-with-subkeys) (f1 . #f(compiled-function () (interactive nil) #<bytecode 0x1f402957216e80>)) (8 keymap (109 . helm-help) (104 . undefined) (8 . undefined) (99 . helm-customize-group) (4 . helm-enable-or-switch-to-debug)) (20 . helm-toggle-resplit-and-swap-windows) (C-tab . undefined) (67108897 . helm-toggle-suspend-update) (3 keymap (57 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddcf0975>)) (56 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddce1975>)) (55 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddc82975>)) (54 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddc93975>)) (53 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddffc975>)) (52 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddfed975>)) (51 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf8e975>)) (50 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf9f975>)) (49 . #f(compiled-function () (interactive nil) #<bytecode -0x467a7f8ddf18975>)) (110 . helm-helm-run-cycle-resume-with-subkeys) (108 . helm-display-line-numbers-mode) (62 . helm-toggle-truncate-line) (21 . helm-refresh) (6 . helm-follow-mode) (9 . helm-insert-or-copy) (11 . helm-kill-selection-and-quit) (25 . helm-yank-selection) (37 . helm-exchange-minibuffer-and-header-line) (95 . helm-toggle-full-frame) (45 . helm-swap-windows)) (67108987 . helm-enlarge-window) (67108989 . helm-narrow-window) (19 . undefined) (24 keymap (57 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf630975>)) (56 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf621975>)) (55 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf642975>)) (54 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf653975>)) (53 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf53c975>)) (52 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf52d975>)) (51 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf54e975>)) (50 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf55f975>)) (49 . #f(compiled-function () (interactive nil) #<bytecode -0x467a1dddf5d8975>)) (2 . helm-resume-list-buffers-after-quit) (98 . helm-resume-previous-session-after-quit) (6 . helm-quit-and-find-file)) (11 . helm-delete-minibuffer-contents) (67108896 . helm-toggle-visible-mark-forward) (0 . helm-toggle-visible-mark) (C-M-up . helm-scroll-other-window-down) (C-M-down . helm-scroll-other-window) (M-prior . helm-scroll-other-window-down) (M-next . helm-scroll-other-window) (12 . helm-recenter-top-bottom-other-window) (left . helm-previous-source) (right . helm-next-source) (15 . helm-next-source) (10 . helm-execute-persistent-action) (9 . helm-select-action) (13 . helm-maybe-exit-minibuffer) (7 . helm-keyboard-quit) (22 . helm-scroll-down) (27 keymap (110 . next-history-element) (112 . previous-history-element) (115 . undefined) (5 . helm-display-all-sources) (1 . helm-show-all-candidates-in-source) (85 . helm-unmark-all) (97 . helm-mark-all) (109 . helm-toggle-all-marks) (41 . helm-next-visible-mark) (40 . helm-prev-visible-mark) (91) (32 . helm-toggle-visible-mark-backward) (33554454 . helm-scroll-other-window-down) (25 . helm-scroll-other-window-down) (22 . helm-scroll-other-window) (12 . helm-reposition-window-other-window) (111 . helm-previous-source) (62 . helm-end-of-buffer) (60 . helm-beginning-of-buffer) (118 . helm-scroll-up)) (next . helm-next-page) (prior . helm-previous-page) ...))
helm-deft()
funcall-interactively(helm-deft)
#<subr call-interactively>(helm-deft t nil)
elmacro-record-command(#<subr call-interactively> helm-deft nil nil)
apply(elmacro-record-command #<subr call-interactively> (helm-deft nil nil))
call-interactively(helm-deft nil nil)
command-execute(helm-deft)

    #+end_example

    I think it could be a problem inside of helm-output-filter--process-source where
    cl-return is used, but the enclosing block is just a =dolist= that does probably not
    enclose the block correctly.

    Test whether a dolist that is not a cl-dolist triggers the condition
    when cl-return is issued

    #+begin_src emacs-lisp :lexical no
      (let ((result 0))
        (dolist (counter '(1 2 3 4 5 6 7 8)
                         result)
          (when (> counter 6)
            (princ "counter > 6\n")
            (cl-return))
          (princ (format "%s\n" counter))
          (setq result (+ counter result)))
        (princ (format "result: %s" result)))
    #+end_src

    Does not produce the error. Still, I think I am on the right track.

    I made the =dolist= in =helm-output-filter--process-source= into a =cl-dolist= and
    defined the function. The error does no longer happen. But when turning it back, there
    also is no error. Maybe it only happens in compiled functions? I did a =compile-defun=
    on the function, but the error did not show up again.

    I byte-recompiled the whole file. A new instance of emacs still showed the error.
    I then introduced the =cl-dolist= and byte recompiled the file. After that, a newly
    launched emacs did no longer expose the problem.
    
